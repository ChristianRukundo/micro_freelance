{
    "openapi": "3.0.0",
    "info": {
        "title": "Micro Freelance Marketplace API",
        "version": "1.0.0",
        "description": "API documentation for the Micro Freelance Marketplace backend."
    },
    "servers": [
        {
            "url": "https://micro-freelance.onrender.com/api",
            "description": "Production Server"
        }
    ],
    "components": {
        "securitySchemes": {
            "cookieAuth": {
                "type": "apiKey",
                "in": "cookie",
                "name": "accessToken",
                "description": "JWT Access Token stored in an HTTP-only cookie."
            }
        },
        "schemas": {
            "UserRole": {
                "type": "string",
                "enum": [
                    "CLIENT",
                    "FREELANCER",
                    "ADMIN"
                ],
                "description": "User's role on the platform."
            },
            "TaskStatus": {
                "type": "string",
                "enum": [
                    "OPEN",
                    "IN_PROGRESS",
                    "IN_REVIEW",
                    "COMPLETED",
                    "CANCELLED"
                ],
                "description": "Current status of a task."
            },
            "MilestoneStatus": {
                "type": "string",
                "enum": [
                    "PENDING",
                    "SUBMITTED",
                    "IN_REVIEW",
                    "APPROVED",
                    "REVISION_REQUESTED"
                ],
                "description": "Current status of a milestone."
            },
            "NotificationType": {
                "type": "string",
                "enum": [
                    "NEW_BID",
                    "BID_ACCEPTED",
                    "MILESTONE_CREATED",
                    "MILESTONE_SUBMITTED",
                    "MILESTONE_APPROVED",
                    "REVISION_REQUESTED",
                    "NEW_MESSAGE",
                    "TASK_CANCELLED",
                    "PAYMENT_SUCCEEDED",
                    "EMAIL_VERIFIED",
                    "PASSWORD_RESET",
                    "STRIPE_ACCOUNT_UPDATED"
                ],
                "description": "Type of notification."
            },
            "ErrorResponse": {
                "type": "object",
                "properties": {
                    "success": {
                        "type": "boolean",
                        "example": false
                    },
                    "status": {
                        "type": "string",
                        "example": "fail"
                    },
                    "message": {
                        "type": "string",
                        "example": "Something went wrong"
                    }
                }
            },
            "LoginRequest": {
                "type": "object",
                "required": [
                    "email",
                    "password"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "password123"
                    }
                }
            },
            "RegisterRequest": {
                "type": "object",
                "required": [
                    "email",
                    "password",
                    "firstName",
                    "lastName",
                    "role"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "newuser@example.com"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "example": "securepassword123"
                    },
                    "firstName": {
                        "type": "string",
                        "example": "John"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Doe"
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole",
                        "example": "CLIENT"
                    }
                }
            },
            "VerifyEmailRequest": {
                "type": "object",
                "required": [
                    "email",
                    "otp"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "newuser@example.com"
                    },
                    "otp": {
                        "type": "string",
                        "pattern": "^\\d{6}$",
                        "example": "123456"
                    }
                }
            },
            "ForgotPasswordRequest": {
                "type": "object",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    }
                }
            },
            "ResetPasswordRequest": {
                "type": "object",
                "required": [
                    "email",
                    "otp",
                    "newPassword"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "example": "user@example.com"
                    },
                    "otp": {
                        "type": "string",
                        "pattern": "^\\d{6}$",
                        "example": "654321"
                    },
                    "newPassword": {
                        "type": "string",
                        "format": "password",
                        "example": "newsecurepassword123"
                    }
                }
            },
            "Attachment": {
                "type": "object",
                "required": [
                    "url",
                    "fileName",
                    "fileType"
                ],
                "properties": {
                    "url": {
                        "type": "string",
                        "format": "url",
                        "example": "https://s3.aws.com/task-file.pdf"
                    },
                    "fileName": {
                        "type": "string",
                        "example": "project_brief.pdf"
                    },
                    "fileType": {
                        "type": "string",
                        "example": "application/pdf"
                    }
                }
            },
            "CreateTaskRequest": {
                "type": "object",
                "required": [
                    "title",
                    "description",
                    "budget",
                    "deadline",
                    "categoryId"
                ],
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Build a React Native Mobile App"
                    },
                    "description": {
                        "type": "string",
                        "example": "Looking for an experienced React Native developer to build a cross-platform mobile application for our new service. Detailed requirements attached."
                    },
                    "budget": {
                        "type": "number",
                        "format": "float",
                        "example": 5000.00
                    },
                    "deadline": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-01-31T17:00:00Z"
                    },
                    "categoryId": {
                        "type": "string",
                        "format": "cuid",
                        "example": "clm96j3p0000000000000000"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Attachment"
                        }
                    }
                }
            },
            "UpdateTaskRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "example": "Updated React Native Mobile App Project"
                    },
                    "description": {
                        "type": "string",
                        "example": "Revised description for the mobile application. Focusing more on UI/UX."
                    },
                    "budget": {
                        "type": "number",
                        "format": "float",
                        "example": 5500.00
                    },
                    "deadline": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-02-15T17:00:00Z"
                    },
                    "categoryId": {
                        "type": "string",
                        "format": "cuid",
                        "example": "clm96j3p0000000000000000"
                    },
                    "status": {
                        "$ref": "#/components/schemas/TaskStatus",
                        "example": "IN_PROGRESS"
                    }
                }
            },
            "SubmitBidRequest": {
                "type": "object",
                "required": [
                    "proposal",
                    "amount"
                ],
                "properties": {
                    "proposal": {
                        "type": "string",
                        "example": "My approach involves using cutting-edge React Native components to ensure optimal performance and a seamless user experience. I have 5 years of experience in mobile development and have delivered similar projects on time and within budget. My portfolio showcases relevant work..."
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 4800.00
                    }
                }
            },
            "CreateMilestoneRequest": {
                "type": "object",
                "required": [
                    "description",
                    "dueDate",
                    "amount"
                ],
                "properties": {
                    "description": {
                        "type": "string",
                        "example": "Frontend UI design and initial component development."
                    },
                    "dueDate": {
                        "type": "string",
                        "format": "date-time",
                        "example": "2024-01-15T17:00:00Z"
                    },
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 1500.00
                    }
                }
            },
            "CreateMultipleMilestonesRequest": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/CreateMilestoneRequest"
                }
            },
            "SubmitMilestoneRequest": {
                "type": "object",
                "required": [
                    "attachments"
                ],
                "properties": {
                    "attachments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Attachment"
                        }
                    },
                    "submissionNotes": {
                        "type": "string",
                        "example": "Here are the files for Milestone 1. Please review.",
                        "nullable": true
                    }
                }
            },
            "RequestRevisionRequest": {
                "type": "object",
                "required": [
                    "comments"
                ],
                "properties": {
                    "comments": {
                        "type": "string",
                        "example": "The design does not fully align with brand guidelines. Please adjust the color palette and font sizes as per the attached mood board."
                    }
                }
            },
            "AddAttachmentCommentRequest": {
                "type": "object",
                "required": [
                    "comment"
                ],
                "properties": {
                    "comment": {
                        "type": "string",
                        "example": "This image needs higher resolution.",
                        "maxLength": 1000
                    }
                }
            },
            "CreateConnectAccountRequest": {
                "type": "object",
                "properties": {
                    "returnUrl": {
                        "type": "string",
                        "format": "url",
                        "example": "http://localhost:3000/dashboard/payouts/success"
                    },
                    "refreshUrl": {
                        "type": "string",
                        "format": "url",
                        "example": "http://localhost:3000/dashboard/payouts/refresh"
                    }
                }
            },
            "CreatePaymentIntentRequest": {
                "type": "object",
                "required": [
                    "amount"
                ],
                "properties": {
                    "amount": {
                        "type": "number",
                        "format": "float",
                        "example": 5000.00
                    }
                }
            },
            "CreateMessageRequest": {
                "type": "object",
                "required": [
                    "content"
                ],
                "properties": {
                    "content": {
                        "type": "string",
                        "example": "Hi freelancer, I've reviewed your submission and it looks great!"
                    }
                }
            },
            "GetSignedUrlRequest": {
                "type": "object",
                "required": [
                    "fileName",
                    "fileType",
                    "folder"
                ],
                "properties": {
                    "fileName": {
                        "type": "string",
                        "example": "my-avatar.jpg"
                    },
                    "fileType": {
                        "type": "string",
                        "example": "image/jpeg"
                    },
                    "folder": {
                        "type": "string",
                        "example": "avatars"
                    }
                }
            },
            "UpdateProfileRequest": {
                "type": "object",
                "properties": {
                    "firstName": {
                        "type": "string",
                        "example": "Jane"
                    },
                    "lastName": {
                        "type": "string",
                        "example": "Smith"
                    },
                    "avatarUrl": {
                        "type": "string",
                        "format": "url",
                        "example": "https://s3.aws.com/avatars/janedoe.jpg"
                    },
                    "bio": {
                        "type": "string",
                        "example": "Experienced graphic designer with a passion for modern aesthetics."
                    },
                    "skills": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "Figma",
                            "Photoshop",
                            "Branding"
                        ]
                    },
                    "portfolioLinks": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "format": "url"
                        },
                        "example": [
                            "https://behance.net/janesmith"
                        ]
                    }
                }
            },
            "AdminUpdateUserStatusRequest": {
                "type": "object",
                "required": [
                    "isSuspended"
                ],
                "properties": {
                    "isSuspended": {
                        "type": "boolean",
                        "example": true
                    },
                    "role": {
                        "$ref": "#/components/schemas/UserRole",
                        "example": "FREELANCER"
                    }
                }
            },
            "ClientDashboardStats": {
                "type": "object",
                "properties": {
                    "totalProjects": {
                        "type": "integer",
                        "example": 10
                    },
                    "activeProjects": {
                        "type": "integer",
                        "example": 3
                    },
                    "completedProjects": {
                        "type": "integer",
                        "example": 7
                    },
                    "totalSpending": {
                        "type": "number",
                        "format": "float",
                        "example": 5250.75
                    },
                    "recentProjects": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "title": {
                                    "type": "string"
                                },
                                "status": {
                                    "$ref": "#/components/schemas/TaskStatus"
                                },
                                "budget": {
                                    "type": "number"
                                },
                                "createdAt": {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "freelancer": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "profile": {
                                            "type": "object",
                                            "properties": {
                                                "firstName": {
                                                    "type": "string"
                                                },
                                                "lastName": {
                                                    "type": "string"
                                                },
                                                "avatarUrl": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "FreelancerDashboardStats": {
                "type": "object",
                "properties": {
                    "totalAssignedProjects": {
                        "type": "integer",
                        "example": 8
                    },
                    "activeProjects": {
                        "type": "integer",
                        "example": 4
                    },
                    "completedProjects": {
                        "type": "integer",
                        "example": 4
                    },
                    "totalEarnings": {
                        "type": "number",
                        "format": "float",
                        "example": 7500.50
                    },
                    "recentProjects": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string"
                                },
                                "title": {
                                    "type": "string"
                                },
                                "status": {
                                    "$ref": "#/components/schemas/TaskStatus"
                                },
                                "budget": {
                                    "type": "number"
                                },
                                "updatedAt": {
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "client": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "string"
                                        },
                                        "profile": {
                                            "type": "object",
                                            "properties": {
                                                "firstName": {
                                                    "type": "string"
                                                },
                                                "lastName": {
                                                    "type": "string"
                                                },
                                                "avatarUrl": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "EarningsByMonth": {
                "type": "object",
                "properties": {
                    "month": {
                        "type": "string",
                        "example": "Jan"
                    },
                    "earnings": {
                        "type": "number",
                        "format": "float",
                        "example": 1200.00
                    }
                }
            }
        }
    },
    "security": [
        {
            "cookieAuth": []
        }
    ],
    "paths": {
        "/auth/register": {
            "post": {
                "summary": "Register a new user account",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User registered, verification email sent."
                    },
                    "400": {
                        "description": "Validation error or invalid input."
                    },
                    "409": {
                        "description": "User with this email already exists."
                    }
                }
            }
        },
        "/auth/verify-email": {
            "post": {
                "summary": "Verify user email with OTP",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/VerifyEmailRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Email verified successfully."
                    },
                    "400": {
                        "description": "Invalid or expired OTP, or email already verified."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/auth/resend-verification-email": {
            "post": {
                "summary": "Resend email verification OTP",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "New verification OTP sent."
                    },
                    "400": {
                        "description": "Email already verified."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "summary": "Login user and set authentication cookies",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login successful, cookies set."
                    },
                    "401": {
                        "description": "Incorrect email/password."
                    },
                    "403": {
                        "description": "Email not verified or account suspended."
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "summary": "Logout user and clear authentication cookies",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logged out successfully."
                    }
                }
            }
        },
        "/auth/refresh-token": {
            "post": {
                "summary": "Refresh access token using refresh token cookie",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "New access token issued, cookies updated."
                    },
                    "401": {
                        "description": "Invalid or missing refresh token."
                    }
                }
            }
        },
        "/auth/forgot-password": {
            "post": {
                "summary": "Request password reset OTP",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "If user exists, OTP sent to email."
                    }
                }
            }
        },
        "/auth/reset-password": {
            "post": {
                "summary": "Reset password using OTP",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password reset successfully."
                    },
                    "400": {
                        "description": "Invalid or expired OTP."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/users/me": {
            "get": {
                "summary": "Get current authenticated user's profile",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User profile retrieved."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            },
            "put": {
                "summary": "Update current authenticated user's profile",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProfileRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Profile updated."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/users/dashboard/client-stats": {
            "get": {
                "summary": "Get client-specific dashboard statistics",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Client dashboard statistics retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/ClientDashboardStats"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (Client role required)."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/users/dashboard/freelancer-stats": {
            "get": {
                "summary": "Get freelancer-specific dashboard statistics",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Freelancer dashboard statistics retrieved.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "data": {
                                            "$ref": "#/components/schemas/FreelancerDashboardStats"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden (Freelancer role required)."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "summary": "Get all available task categories",
                "responses": {
                    "200": {
                        "description": "List of categories."
                    }
                }
            },
            "post": {
                "summary": "Create a new task category (Admin only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Category created."
                    },
                    "403": {
                        "description": "Forbidden (Admin only)."
                    },
                    "409": {
                        "description": "Category name already exists."
                    }
                }
            }
        },
        "/categories/{id}": {
            "put": {
                "summary": "Update a task category (Admin only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "required": [
                                    "name"
                                ],
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Category updated."
                    },
                    "403": {
                        "description": "Forbidden (Admin only)."
                    },
                    "404": {
                        "description": "Category not found."
                    },
                    "409": {
                        "description": "Another category with this name already exists."
                    }
                }
            },
            "delete": {
                "summary": "Delete a task category (Admin only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Category deleted."
                    },
                    "400": {
                        "description": "Category is associated with tasks."
                    },
                    "403": {
                        "description": "Forbidden (Admin only)."
                    },
                    "404": {
                        "description": "Category not found."
                    }
                }
            }
        },
        "/tasks": {
            "get": {
                "summary": "Get a list of tasks with filtering and pagination",
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "categoryId",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    },
                    {
                        "name": "minBudget",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "maxBudget",
                        "in": "query",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/TaskStatus",
                            "default": "OPEN"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search query for title/description"
                        }
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "createdAt",
                                "budget",
                                "deadline"
                            ],
                            "default": "createdAt"
                        }
                    },
                    {
                        "name": "sortOrder",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "default": "desc"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of tasks."
                    }
                }
            },
            "post": {
                "summary": "Create a new task (Client only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Task created successfully."
                    },
                    "400": {
                        "description": "Validation error."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Client role required)."
                    }
                }
            }
        },
        "/tasks/{id}": {
            "get": {
                "summary": "Get a single task by ID",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task details."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                }
            },
            "put": {
                "summary": "Update an existing task (Client only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateTaskRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Task updated successfully."
                    },
                    "400": {
                        "description": "Validation error or invalid task status for update."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Client role or not task owner)."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                }
            },
            "delete": {
                "summary": "Delete a task (Client only, if OPEN and no bids)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Task deleted successfully."
                    },
                    "400": {
                        "description": "Task not OPEN or has existing bids."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Client role or not task owner)."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                }
            },
            "patch": {
                "summary": "Cancel a task (Client or Admin only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task cancelled successfully."
                    },
                    "400": {
                        "description": "Task already completed or cancelled."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Client/Admin role or not task owner)."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                }
            }
        },
        "/tasks/{taskId}/bids": {
            "post": {
                "summary": "Submit a bid for a task (Freelancer only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitBidRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Bid submitted successfully."
                    },
                    "400": {
                        "description": "Validation error or task not OPEN."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Freelancer role required)."
                    },
                    "404": {
                        "description": "Task not found."
                    },
                    "409": {
                        "description": "Already submitted a bid for this task."
                    }
                }
            },
            "get": {
                "summary": "Get all bids for a specific task (Client only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of bids for the task."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Client role or not task owner)."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                }
            }
        },
        "/bids/{bidId}/accept": {
            "post": {
                "summary": "Accept a freelancer's bid (Client only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "bidId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bid accepted, task status updated to IN_PROGRESS."
                    },
                    "400": {
                        "description": "Task not OPEN or already assigned."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Client role or not task owner)."
                    },
                    "404": {
                        "description": "Bid not found."
                    }
                }
            }
        },
        "/tasks/{taskId}/milestones": {
            "post": {
                "summary": "Create milestones for a task (Client only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMultipleMilestonesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Milestones created successfully."
                    },
                    "400": {
                        "description": "Validation error, task not IN_PROGRESS, or no freelancer assigned."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Client role or not task owner)."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                }
            },
            "get": {
                "summary": "Get all milestones for a task (Client or Freelancer)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of milestones."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Not task client/freelancer)."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                }
            }
        },
        "/milestones/{milestoneId}/submit": {
            "patch": {
                "summary": "Freelancer submits a milestone for review with attachments and notes",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "milestoneId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SubmitMilestoneRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Milestone submitted."
                    },
                    "400": {
                        "description": "Milestone cannot be submitted in current status or no attachments."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Not assigned freelancer)."
                    },
                    "404": {
                        "description": "Milestone not found."
                    }
                }
            }
        },
        "/milestones/{milestoneId}/request-revision": {
            "patch": {
                "summary": "Client requests revision for a submitted milestone",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "milestoneId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestRevisionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Revision requested."
                    },
                    "400": {
                        "description": "Milestone not in SUBMITTED status."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Not task client)."
                    },
                    "404": {
                        "description": "Milestone not found."
                    }
                }
            }
        },
        "/milestones/{milestoneId}/approve": {
            "patch": {
                "summary": "Client approves a milestone and triggers payout",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "milestoneId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Milestone approved and payment released."
                    },
                    "400": {
                        "description": "Milestone not in SUBMITTED or REVISION_REQUESTED status, or missing freelancer Stripe account."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Not task client)."
                    },
                    "404": {
                        "description": "Milestone not found."
                    }
                }
            }
        },
        "/milestones/attachments/{attachmentId}/comment": {
            "patch": {
                "summary": "Client adds a comment to a specific milestone attachment",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "attachmentId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AddAttachmentCommentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Comment added successfully."
                    },
                    "403": {
                        "description": "Forbidden (Not task client)."
                    },
                    "404": {
                        "description": "Attachment not found."
                    }
                }
            }
        },
        "/stripe/connect-account": {
            "post": {
                "summary": "Create/Onboard a Stripe Connect account for a freelancer",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "requestBody": {
                    "required": false,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateConnectAccountRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns a URL to complete Stripe onboarding."
                    },
                    "400": {
                        "description": "User not found or email not verified."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Freelancer role required)."
                    }
                }
            }
        },
        "/stripe/account-status": {
            "get": {
                "summary": "Get the onboarding status of the freelancer's Stripe Connect account",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns whether the Stripe account onboarding is complete."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Freelancer role required)."
                    },
                    "404": {
                        "description": "Stripe account not linked for user."
                    }
                }
            }
        },
        "/tasks/{taskId}/create-payment-intent": {
            "post": {
                "summary": "Client creates a Stripe Payment Intent to fund a task (escrow)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePaymentIntentRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Payment Intent created, returns client secret."
                    },
                    "400": {
                        "description": "Invalid amount or task not found."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Client role or not task owner)."
                    }
                }
            }
        },
        "/stripe/webhook": {
            "post": {
                "summary": "Stripe webhook endpoint for event notifications",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Webhook received and processed."
                    },
                    "400": {
                        "description": "Invalid webhook signature."
                    }
                }
            }
        },
        "/messages/tasks/{taskId}": {
            "get": {
                "summary": "Get message history for a task chat (Client or Freelancer)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 50
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message history."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Not task client/freelancer)."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                }
            },
            "post": {
                "summary": "Send a message to a task chat (Client or Freelancer)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateMessageRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Message sent."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Not task client/freelancer)."
                    },
                    "404": {
                        "description": "Task not found."
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "summary": "Get user's notifications",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "isRead",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "description": "Filter by read status"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/NotificationType",
                            "description": "Filter by notification type"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of notifications."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/notifications/{notificationId}/read": {
            "patch": {
                "summary": "Mark a specific notification as read",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "notificationId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification marked as read."
                    },
                    "401": {
                        "description": "Unauthorized."
                    },
                    "403": {
                        "description": "Forbidden (Not owner of notification)."
                    },
                    "404": {
                        "description": "Notification not found."
                    }
                }
            }
        },
        "/notifications/read-all": {
            "patch": {
                "summary": "Mark all unread notifications for the user as read",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All notifications marked as read."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        },
        "/admin/users": {
            "get": {
                "summary": "Get all users (Admin only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 1
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 10
                        }
                    },
                    {
                        "name": "role",
                        "in": "query",
                        "schema": {
                            "$ref": "#/components/schemas/UserRole"
                        }
                    },
                    {
                        "name": "isSuspended",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "q",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "description": "Search by email, first/last name"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of all users."
                    },
                    "403": {
                        "description": "Forbidden (Admin only)."
                    }
                }
            }
        },
        "/admin/users/{userId}/status": {
            "patch": {
                "summary": "Update user suspension status or role (Admin only)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AdminUpdateUserStatusRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User status updated."
                    },
                    "403": {
                        "description": "Forbidden (Admin only or cannot modify super admin)."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/admin/users/{userId}": {
            "delete": {
                "summary": "Delete a user (Admin only, cannot delete other admins)",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "format": "cuid"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted."
                    },
                    "403": {
                        "description": "Forbidden (Admin only or cannot delete another admin)."
                    },
                    "404": {
                        "description": "User not found."
                    }
                }
            }
        },
        "/uploads/signed-url": {
            "post": {
                "summary": "Get a pre-signed S3 URL for file uploads",
                "security": [
                    {
                        "cookieAuth": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GetSignedUrlRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns a pre-signed URL and S3 key."
                    },
                    "400": {
                        "description": "Validation error or unsupported file type."
                    },
                    "401": {
                        "description": "Unauthorized."
                    }
                }
            }
        }
    }
}