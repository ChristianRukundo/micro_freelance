generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String         @unique
  password      String?
  image         String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  bookings      Booking[]
  favorites     Favorite[]
  refreshTokens RefreshToken[]
  Property      Property[]

  // Chat relations
  sentMessages             Message[]                 @relation("MessageSender")
  conversationParticipants ConversationParticipant[]
}

model Property {
  id              String   @id @default(cuid())
  title           String
  description     String
  location        String
  subLocation     String?
  pricePerNight   Float
  guests          Int
  bedrooms        Int
  bathrooms       Int
  squareMeters    Int
  images          String[]
  amenities       String[]
  outdoorFeatures String[] @default([])
  activities      String[] @default([])
  coordinates     Json?
  status          String   @default("active")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  agentId      String
  agent        User           @relation(fields: [agentId], references: [id])
  bookings     Booking[]
  favorites    Favorite[]
  Conversation Conversation[]
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  propertyId  String
  checkIn     DateTime
  checkOut    DateTime
  guests      Int
  totalAmount Float
  cleaningFee Float    @default(130)
  serviceFee  Float
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  property    Property @relation(fields: [propertyId], references: [id])
  Payment     Payment?
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  property   Property @relation(fields: [propertyId], references: [id])

  @@unique([userId, propertyId])
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String        @unique
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(pending)
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime      @default(now())

  booking Booking @relation(fields: [bookingId], references: [id])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  AGENT
}

enum PaymentMethod {
  credit_card
  paypal
  mobile_money
  bank_transfer
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

// Chat Models
model Conversation {
  id         String   @id @default(cuid())
  propertyId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  property     Property                  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  participants ConversationParticipant[]
  messages     Message[]

  @@index([propertyId])
}

model ConversationParticipant {
  id             String    @id @default(cuid())
  conversationId String
  userId         String
  joinedAt       DateTime  @default(now())
  lastReadAt     DateTime?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  messageType    MessageType @default(TEXT)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User         @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
}

enum MessageType {
  TEXT
  IMAGE
  FILE
}
