datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  CLIENT
  FREELANCER
  ADMIN
}

enum TaskStatus {
  OPEN
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum MilestoneStatus {
  PENDING
  SUBMITTED
  IN_REVIEW
  APPROVED
  REVISION_REQUESTED
}

enum TransactionStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum TransactionType {
  PLATFORM_FEE
  PAYOUT
  ESCROW_FUNDING
  ESCROW_RELEASE
}

enum NotificationType {
  NEW_BID
  BID_ACCEPTED
  MILESTONE_CREATED
  MILESTONE_SUBMITTED
  MILESTONE_APPROVED
  REVISION_REQUESTED
  NEW_MESSAGE
  TASK_CANCELLED
  PAYMENT_SUCCEEDED
  EMAIL_VERIFIED
  PASSWORD_RESET
  STRIPE_ACCOUNT_UPDATED
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  password             String
  role                 UserRole
  emailVerified        DateTime?
  emailVerificationOTP String?
  passwordResetOTP     String?
  otpExpires           DateTime?
  isSuspended          Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  stripeAccountId        String? @unique
  stripeAccountCompleted Boolean @default(false)

  profile           Profile?
  tasksAsClient     Task[]         @relation("ClientTasks")
  tasksAsFreelancer Task[]         @relation("FreelancerTasks")
  bids              Bid[]
  messages          Message[]
  notifications     Notification[]
  transactions      Transaction[]
}

model Profile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName      String
  lastName       String
  avatarUrl      String?
  bio            String?  @db.Text
  skills         String[]
  portfolioLinks String[]
}

model Category {
  id    String @id @default(cuid())
  name  String @unique
  tasks Task[]
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String     @db.Text
  status      TaskStatus @default(OPEN)
  budget      Float
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  clientId     String
  client       User    @relation("ClientTasks", fields: [clientId], references: [id])
  freelancerId String?
  freelancer   User?   @relation("FreelancerTasks", fields: [freelancerId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  attachments   Attachment[]
  bids          Bid[]
  milestones    Milestone[]
  messages      Message[]
  transactions  Transaction[]
  notifications Notification[] @relation("TaskNotifications")
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  fileName  String
  fileType  String
  createdAt DateTime @default(now())

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Bid {
  id           String   @id @default(cuid())
  proposal     String   @db.Text
  amount       Float
  createdAt    DateTime @default(now())
  status       String   @default("PENDING")
  freelancerId String
  freelancer   User     @relation(fields: [freelancerId], references: [id])

  taskId        String
  task          Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  notifications Notification[] @relation("BidNotifications")

  @@unique([freelancerId, taskId])
}

model Milestone {
  id          String          @id @default(cuid())
  description String
  dueDate     DateTime
  amount      Float
  status      MilestoneStatus @default(PENDING)
  comments    String?

  taskId        String
  task          Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  transactions  Transaction[]
  notifications Notification[] @relation("MilestoneNotifications")
}

model Transaction {
  id               String            @id @default(cuid())
  amount           Float
  status           TransactionStatus
  type             TransactionType
  stripeChargeId   String?           @unique
  stripeTransferId String?           @unique
  platformFee      Float?
  createdAt        DateTime          @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  milestoneId String?
  milestone   Milestone? @relation(fields: [milestoneId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  url       String
  createdAt DateTime         @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  taskId      String?
  task        Task?      @relation("TaskNotifications", fields: [taskId], references: [id])
  bidId       String?
  bid         Bid?       @relation("BidNotifications", fields: [bidId], references: [id])
  milestoneId String?
  milestone   Milestone? @relation("MilestoneNotifications", fields: [milestoneId], references: [id])
}
